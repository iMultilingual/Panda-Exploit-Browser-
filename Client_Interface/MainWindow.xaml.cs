using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using CefSharp.Wpf;

namespace PandaWebAPI.Client_Interface
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        List<string> WebPages; // list of webpages visited since the browser was opened
        int Current = 0; // to keep track of the current index of the webpages
        public MainWindow(string exploitname)
        {
            InitializeComponent();
            StartDebugService();
            WebPages = new List<string>();
            GoHome(exploitname);
        }

        private void EndDebuggerTask(Process process)
        {
            process.Kill();
            System.Windows.Forms.Application.Exit();
        }

        public void Panda_DebugCaught()
        {

            System.Windows.Forms.Application.Exit();
        }

        public void StartDebugService()
        {
            debugTimer.Tick += AntiDebug;
            debugTimer.Start();
        }

        private DispatcherTimer debugTimer = new DispatcherTimer
        {
            Interval = new TimeSpan(0, 0, 3)
        };

        private void AntiDebug(object sender, EventArgs e)
        {
            if (Debugger.IsLogging())
            {
                Panda_DebugCaught();
            }
            if (Debugger.IsAttached)
            {
                Panda_DebugCaught();
            }
            if (Environment.GetEnvironmentVariable("complus_profapi_profilercompatibilitysetting") != null)
            {
                Panda_DebugCaught();
            }
            if (Environment.GetEnvironmentVariable("COR_ENABLE_PROFILING") == "1")
            {
                Panda_DebugCaught();
            }
            Process[] processes = Process.GetProcesses();
            foreach (Process process in processes)
            {
                switch (process.ProcessName.ToLower())
                {
                    case "wireshark":
                        EndDebuggerTask(process);
                        break;
                    case "dnspy-x86":
                        EndDebuggerTask(process);
                        break;
                    case "dnspy":
                        EndDebuggerTask(process);
                        break;
                    case "fiddler":
                        EndDebuggerTask(process);
                        break;
                    case "charles":
                        EndDebuggerTask(process);
                        break;
                    case "hacker":
                        EndDebuggerTask(process);
                        break;
                    case "ollydbg":
                        EndDebuggerTask(process);
                        break;
                    case "httpdebuggersvc":
                        EndDebuggerTask(process);
                        break;
                    case "httpdebuggerpro":
                        EndDebuggerTask(process);
                        break;
                    case "softperfect":
                        EndDebuggerTask(process);
                        break;
                }
                switch (process.MainWindowTitle.ToLower())
                {
                    case "wireshark":
                        EndDebuggerTask(process);
                        break;
                    case "dnspy-x86":
                        EndDebuggerTask(process);
                        break;
                    case "dnspy":
                        EndDebuggerTask(process);
                        break;
                    case "fiddler":
                        EndDebuggerTask(process);
                        break;
                    case "charles":
                        EndDebuggerTask(process);
                        break;
                    case "hacker":
                        EndDebuggerTask(process);
                        break;
                    case "ollydbg":
                        EndDebuggerTask(process);
                        break;
                    case "httpdebuggersvc":
                        EndDebuggerTask(process);
                        break;
                    case "httpdebuggerpro":
                        EndDebuggerTask(process);
                        break;
                    case "softperfect":
                        EndDebuggerTask(process);
                        break;
                }
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //
        }

        private void Exitbtn_MouseDown(object sender, MouseButtonEventArgs e)
        {
            Close();
        }

        private void Minimizebtn_MouseDown(object sender, MouseButtonEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }


        void GoHome(string exploitname)
        {
            if (exploitname == "PandaZen")
            {
                chrome.Address = "https://pandacheat.weebly.com/pandacheckpoint1.html";
                WebPages.Add("https://pandacheat.weebly.com/pandacheckpoint1.html");
            }
            else if (exploitname == "EclipseReborn")
            {
                chrome.Address = "https://pandacheat.weebly.com/eclipsestartkey.html";
                WebPages.Add("https://pandacheat.weebly.com/eclipsestartkey.html");
            }

        }

        void LoadWebPages(string Link, bool addToList = true)
        {
            chrome.Address = Link;

            MenuItem item = new MenuItem();
            item.Click += MenuClicked;
            item.Header = Link;
            item.Width = 184;


            if (addToList)
            {
                Current++;
                WebPages.Add(Link);
            }
        }

        void ToggleWebPages(string Option)
        {
            if (Option == "→")
            {
                if (WebPages.Count - Current - 1 != 0)
                {
                    Current++;
                    LoadWebPages(WebPages[Current], false);
                }
            }

            else
            {
                if (WebPages.Count + Current - 1 >= WebPages.Count)
                {
                    Current--;
                    LoadWebPages(WebPages[Current], false);
                }
            }
        }


        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Button btn = (Button)sender;
            ToggleWebPages(btn.Content.ToString());
        }


        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            LoadWebPages(WebPages[Current]);
        }


        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            LoadWebPages(WebPages[0]);
        }

        private void MenuClicked(object sender, RoutedEventArgs e)
        {
            MenuItem item = (MenuItem)sender;
            LoadWebPages(item.Header.ToString());
        }

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left && e.ButtonState == MouseButtonState.Pressed)
            {
                DragMove();
            }
        }

        private void area_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                LoadWebPages("youtube.com");
            }
        }


        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            if (WebPages.Count != 0)
            {

            }
        }

        private void Button_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            e.Handled = true; //disable an event, ofc im smart tangina mo
        }

        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            if (Properties.Settings.Default.Exploit == "PandaExploit")
            {
                chrome.Address = "https://pandacheat.weebly.com/pandacheckpoint1.html";
                WebPages.Add("https://pandacheat.weebly.com/pandacheckpoint1.html");
            }
            else if (Properties.Settings.Default.Exploit == "EclipseReborn")
            {
                chrome.Address = "https://pandacheat.weebly.com/eclipsestartkey.html";
                WebPages.Add("https://pandacheat.weebly.com/eclipsestartkey.html");
            }
        }
    }
}
